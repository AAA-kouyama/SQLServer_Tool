インデックス不足数の調査 
SELECT DB_NAME(database_id) as [データベース名],
       count(*) as [期待しているインデックスが存在しない数]
FROM sys.dm_db_missing_index_details 
GROUP BY DB_NAME(database_id)

インデックスを作成した場合のパフォーマンス改善率 
USE [データベース名]
SELECT gs.avg_user_impact AS [予測されるクエリパフォーマンス改善率],
       gs.last_user_seek AS [最後にシークした時間],
       id.statement AS [テーブル名] ,
       id.equality_columns AS [等値述語に使用できる列],
       id.inequality_columns AS [不等値述語に使用できる列] ,
       id.included_columns AS [包括列として必要な列],
       gs.unique_compiles AS [コンパイルおよび再コンパイルの数],
       gs.user_seeks AS [クエリによって発生したシーク数]
 FROM  sys.dm_db_missing_index_group_stats AS gs
       INNER JOIN sys.dm_db_missing_index_groups AS ig
			ON gs.group_handle = ig.index_group_handle
       INNER JOIN sys.dm_db_missing_index_details AS id
			ON ig.index_handle = id.index_handle
 WHERE id.[database_id] =DB_ID() Order By gs.last_user_seek ASC

インデックス統計情報の参照 
SELECT [テーブル名] = t.name,
       [統計名] = s.name, 
       [統計の自動作成] = s.auto_created, 
       [NORECOMPUTEオプション] = s.no_recompute,
       [フィルター定義] = s.has_filter,
       [フィルター定義] = s.filter_definition,
       [行数] = sp.rows,
       [フィルター化されていない行数] = sp.unfiltered_rows,
       [ステップ数] = sp.steps,
       [サンプリング行数] = sp.rows_sampled,
       [統計情報最終更新日] = sp.last_updated
FROM sys.tables AS t 
INNER JOIN sys.stats AS s  
ON s.object_id = t.object_id
CROSS APPLY sys.dm_db_stats_properties(s.object_id, s.stats_id) AS sp 
ORDER BY t.name OPTION (RECOMPILE);
